{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Neptune A genomic signature is a genomic locus that is sufficiently represented in an inclusion group, and sufficiently absent from a background, or exclusion group. A signature might correlate genomic features with phenotypic traits, such as the presence of a gene with increased organism pathogenicity. Neptune locates genomic signatures using an exact k -mer matching strategy while accommodating k -mer mismatches. The software identifies sequences that are sufficiently represented within inclusion targets and sufficiently absent from exclusion targets. The signature discovery process is accomplished using probabilistic models instead of heuristic strategies. Neptune may be leveraged to reveal discriminatory signature sequences to uniquely delineate one group of organisms, such as isolates associated with a disease cluster or event, from unrelated sporadic or environmental microbes. Neptune v2.0.0 2024-10-21 This release updates Neptune to Python3, removes DRMAA support, fixes a crash when no signatures are produced, and updates the installation process. Resources Source : https://github.com/phac-nml/neptune Installation : https://phac-nml.github.io/neptune/install/ Walkthrough : https://phac-nml.github.io/neptune/walkthrough/ Contact Eric Marinier : eric.marinier@phac-aspc.gc.ca Gary van Domselaar : gary.vandomselaar@phac-aspc.gc.ca","title":"Home"},{"location":"#neptune","text":"A genomic signature is a genomic locus that is sufficiently represented in an inclusion group, and sufficiently absent from a background, or exclusion group. A signature might correlate genomic features with phenotypic traits, such as the presence of a gene with increased organism pathogenicity. Neptune locates genomic signatures using an exact k -mer matching strategy while accommodating k -mer mismatches. The software identifies sequences that are sufficiently represented within inclusion targets and sufficiently absent from exclusion targets. The signature discovery process is accomplished using probabilistic models instead of heuristic strategies. Neptune may be leveraged to reveal discriminatory signature sequences to uniquely delineate one group of organisms, such as isolates associated with a disease cluster or event, from unrelated sporadic or environmental microbes.","title":"Neptune"},{"location":"#neptune-v200","text":"2024-10-21 This release updates Neptune to Python3, removes DRMAA support, fixes a crash when no signatures are produced, and updates the installation process.","title":"Neptune v2.0.0"},{"location":"#resources","text":"Source : https://github.com/phac-nml/neptune Installation : https://phac-nml.github.io/neptune/install/ Walkthrough : https://phac-nml.github.io/neptune/walkthrough/","title":"Resources"},{"location":"#contact","text":"Eric Marinier : eric.marinier@phac-aspc.gc.ca Gary van Domselaar : gary.vandomselaar@phac-aspc.gc.ca","title":"Contact"},{"location":"CHANGELOG/","text":"Change Log All notable changes to Neptune will be documented in this file. 2.0.0 2024-10-21 This release updates Neptune to Python3, removes DRMAA support, fixes a crash when no signatures are produced, and updates the installation process. Changed Python3 has replaced Python2. Improved and updated the installation process. Fixed Fixed a crash that occurred when candidate signatures were of such low quality (as a consequence of ambiguous sequence characters) that these regions could not be aligned with themselves using BLAST. Removed DRMAA support. 1.2.5 2017-05-03 This release provides fixes for ambiguous crashes and improvements to the code quality. Changed We have made an effort to improve the readability of function comments in the source code. Fixed When running Neptune in parallel (non-DRMAA mode), runtime errors in forked jobs now correctly inform the calling process instead of hanging forever with no meaningful error message. Additionally, the runtime error message is reported to the user. This relates the a known error in Python 2.7 (https://bugs.python.org/issue9400). Inputs containing no A, C, G, or T characters will now cause an appropriate runtime error with an informative message about this problem. Lowercase characters are no longer ingnored when calculating the GC content of inputs. 1.2.4 2017-02-27 This release makes several small improvements, including: reducing the standard output clutter, adding timings to stages, and updating the documentation. Added Links in the README to the manual. Walkthrough to the manual. Example data to test the software. Timings for stages. Changed Improved clarity in manual. Codeblocks in the manual. Removed Considerable clutter has been removed from standard output. 1.2.3 2016-07-11 This release simplifies the installation process. Added A script for automatically installing Debian dependencies. Changed The dependencies have changed. Several are now installed as part of Neptune. The Neptune installation no longer requires security privilages. Neptune may be installed multiple times in multiple locations. NumPy and SciPy are now installed using pip. 1.2.2 2016-04-06 This release includes some Galaxy improvements and fixes a signature scoring problem. Changed Galaxy XML files have been updated to use different packages of Python. Fixed A bug confusing inclusion and exclusion has been fixed. 1.2.1 2016-03-23 This release of Neptune adds support for Galaxy. Added Galaxy-related files: capsules, XML files. Changed Neptune.py and Execution.py are now compatible with Galaxy. 1.2.0 2016-03-18 This release of Neptune allows for execution on a single machine without requiring DRMAA. Furthermore, several command line parameters have been modified. Added Neptune may be run in parallel on a single machine without DRMAA. \"--version\" command line option. Changed Several command-line parameters have been changed. The \"--parallelization\" / \"-p\" parameter effects all parallelization. The exclusion score is now displayed as a positive number. 1.1.1 2016-02-24 This release of Neptune updates the installation instructions to be more informative. Changed Updated README and manual installation instructions. Modified the style of code examples in the manual. 1.1.0 2016-01-19 This release of Neptune introduces a simple signature consolidation step, which consolidates signatures produced from multiple files into a single file. Furthermore, the software has been updated to be compatible with the Slurm scheduler. Added Neptune now automatically consolidates signatures into a single file. DRMAA job names. Neptune now maintains DRMAA log files. Added the ability to specify the BLAST seed size. Changed The run receipt has been reorganized. Removed some unneeded output files. Removed some unneeded print statements. Removed the --verbose parameter. There was no functionality. Fixed Neptune is now compatible with the Slurm scheduler. Updated PEP8/Flake8 code compliance (W503). 1.0.0 2015-11-18 This is the initial release of Neptune.","title":"Change Log"},{"location":"CHANGELOG/#change-log","text":"All notable changes to Neptune will be documented in this file.","title":"Change Log"},{"location":"CHANGELOG/#200","text":"2024-10-21 This release updates Neptune to Python3, removes DRMAA support, fixes a crash when no signatures are produced, and updates the installation process.","title":"2.0.0"},{"location":"CHANGELOG/#changed","text":"Python3 has replaced Python2. Improved and updated the installation process.","title":"Changed"},{"location":"CHANGELOG/#fixed","text":"Fixed a crash that occurred when candidate signatures were of such low quality (as a consequence of ambiguous sequence characters) that these regions could not be aligned with themselves using BLAST.","title":"Fixed"},{"location":"CHANGELOG/#removed","text":"DRMAA support.","title":"Removed"},{"location":"CHANGELOG/#125","text":"2017-05-03 This release provides fixes for ambiguous crashes and improvements to the code quality.","title":"1.2.5"},{"location":"CHANGELOG/#changed_1","text":"We have made an effort to improve the readability of function comments in the source code.","title":"Changed"},{"location":"CHANGELOG/#fixed_1","text":"When running Neptune in parallel (non-DRMAA mode), runtime errors in forked jobs now correctly inform the calling process instead of hanging forever with no meaningful error message. Additionally, the runtime error message is reported to the user. This relates the a known error in Python 2.7 (https://bugs.python.org/issue9400). Inputs containing no A, C, G, or T characters will now cause an appropriate runtime error with an informative message about this problem. Lowercase characters are no longer ingnored when calculating the GC content of inputs.","title":"Fixed"},{"location":"CHANGELOG/#124","text":"2017-02-27 This release makes several small improvements, including: reducing the standard output clutter, adding timings to stages, and updating the documentation.","title":"1.2.4"},{"location":"CHANGELOG/#added","text":"Links in the README to the manual. Walkthrough to the manual. Example data to test the software. Timings for stages.","title":"Added"},{"location":"CHANGELOG/#changed_2","text":"Improved clarity in manual. Codeblocks in the manual.","title":"Changed"},{"location":"CHANGELOG/#removed_1","text":"Considerable clutter has been removed from standard output.","title":"Removed"},{"location":"CHANGELOG/#123","text":"2016-07-11 This release simplifies the installation process.","title":"1.2.3"},{"location":"CHANGELOG/#added_1","text":"A script for automatically installing Debian dependencies.","title":"Added"},{"location":"CHANGELOG/#changed_3","text":"The dependencies have changed. Several are now installed as part of Neptune. The Neptune installation no longer requires security privilages. Neptune may be installed multiple times in multiple locations. NumPy and SciPy are now installed using pip.","title":"Changed"},{"location":"CHANGELOG/#122","text":"2016-04-06 This release includes some Galaxy improvements and fixes a signature scoring problem.","title":"1.2.2"},{"location":"CHANGELOG/#changed_4","text":"Galaxy XML files have been updated to use different packages of Python.","title":"Changed"},{"location":"CHANGELOG/#fixed_2","text":"A bug confusing inclusion and exclusion has been fixed.","title":"Fixed"},{"location":"CHANGELOG/#121","text":"2016-03-23 This release of Neptune adds support for Galaxy.","title":"1.2.1"},{"location":"CHANGELOG/#added_2","text":"Galaxy-related files: capsules, XML files.","title":"Added"},{"location":"CHANGELOG/#changed_5","text":"Neptune.py and Execution.py are now compatible with Galaxy.","title":"Changed"},{"location":"CHANGELOG/#120","text":"2016-03-18 This release of Neptune allows for execution on a single machine without requiring DRMAA. Furthermore, several command line parameters have been modified.","title":"1.2.0"},{"location":"CHANGELOG/#added_3","text":"Neptune may be run in parallel on a single machine without DRMAA. \"--version\" command line option.","title":"Added"},{"location":"CHANGELOG/#changed_6","text":"Several command-line parameters have been changed. The \"--parallelization\" / \"-p\" parameter effects all parallelization. The exclusion score is now displayed as a positive number.","title":"Changed"},{"location":"CHANGELOG/#111","text":"2016-02-24 This release of Neptune updates the installation instructions to be more informative.","title":"1.1.1"},{"location":"CHANGELOG/#changed_7","text":"Updated README and manual installation instructions. Modified the style of code examples in the manual.","title":"Changed"},{"location":"CHANGELOG/#110","text":"2016-01-19 This release of Neptune introduces a simple signature consolidation step, which consolidates signatures produced from multiple files into a single file. Furthermore, the software has been updated to be compatible with the Slurm scheduler.","title":"1.1.0"},{"location":"CHANGELOG/#added_4","text":"Neptune now automatically consolidates signatures into a single file. DRMAA job names. Neptune now maintains DRMAA log files. Added the ability to specify the BLAST seed size.","title":"Added"},{"location":"CHANGELOG/#changed_8","text":"The run receipt has been reorganized. Removed some unneeded output files. Removed some unneeded print statements. Removed the --verbose parameter. There was no functionality.","title":"Changed"},{"location":"CHANGELOG/#fixed_3","text":"Neptune is now compatible with the Slurm scheduler. Updated PEP8/Flake8 code compliance (W503).","title":"Fixed"},{"location":"CHANGELOG/#100","text":"2015-11-18 This is the initial release of Neptune.","title":"1.0.0"},{"location":"examples/","text":"Examples Basic Execution The following basic example will report all of the signatures that are sufficiently shared by the (FASTA) sequences in the inclusion directory and sufficiently absent from the (FASTA) sequences in the exclusion directory. Neptune will automatically calculate many of the parameters used in this execution. neptune --inclusion inclusion_directory/ --exclusion exclusion_directory/ --output output_directory/ The output of immediate interest will be located in the follow file: output_directory/consolidated/consolidated.fasta This file will contain a consolidated list of signatures, sorted by their Neptune score, which is a combined estimate of sensitivity and specificity. The signatures with higher scores, near the top of the file, are considered the most discriminatory signatures. Faster Execution The following example highlights options that allow Neptune to run faster when running in parallel mode (default). It will attempt to run Neptune on 16 parallel processes ( --parallelization ) and parallelize k -mer counting and aggregation into 64 tasks ( --organization ) distributed over the 16 parallel processes available. neptune --inclusion inclusion_directory/ --exclusion exclusion_directory/ --output output_directory/ --parallelization 16 --organization 3 Specifying File Locations You may wish to specify particular files used in signature discovery. This may be important when specifying references for signature extraction: neptune --inclusion inclusion_dir/ in1.fasta in2.fasta --exclusion exclusion_dir/ ex1.fasta ex2.fasta --reference in1.fasta in2.fasta --output output/","title":"Simple"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#basic-execution","text":"The following basic example will report all of the signatures that are sufficiently shared by the (FASTA) sequences in the inclusion directory and sufficiently absent from the (FASTA) sequences in the exclusion directory. Neptune will automatically calculate many of the parameters used in this execution. neptune --inclusion inclusion_directory/ --exclusion exclusion_directory/ --output output_directory/ The output of immediate interest will be located in the follow file: output_directory/consolidated/consolidated.fasta This file will contain a consolidated list of signatures, sorted by their Neptune score, which is a combined estimate of sensitivity and specificity. The signatures with higher scores, near the top of the file, are considered the most discriminatory signatures.","title":"Basic Execution"},{"location":"examples/#faster-execution","text":"The following example highlights options that allow Neptune to run faster when running in parallel mode (default). It will attempt to run Neptune on 16 parallel processes ( --parallelization ) and parallelize k -mer counting and aggregation into 64 tasks ( --organization ) distributed over the 16 parallel processes available. neptune --inclusion inclusion_directory/ --exclusion exclusion_directory/ --output output_directory/ --parallelization 16 --organization 3","title":"Faster Execution"},{"location":"examples/#specifying-file-locations","text":"You may wish to specify particular files used in signature discovery. This may be important when specifying references for signature extraction: neptune --inclusion inclusion_dir/ in1.fasta in2.fasta --exclusion exclusion_dir/ ex1.fasta ex2.fasta --reference in1.fasta in2.fasta --output output/","title":"Specifying File Locations"},{"location":"format/","text":"Signature Format The signatures produced by Neptune are output in FASTA format with additional information in the description line. Signatures are output in the following format: >[ID] [SCORE] [IN SCORE] [EX SCORE] [LENGTH] [REF] [POS] [SEQUENCE] The following is an example: >425 score=0.86 in=0.98 ex=-0.13 len=31 ref=ecoli pos=160 TGTCATTCTCCTGTTCTGCCTGTATCACTGC Where: Item Full Name Description [ID] ID An arbitrary , run-unique ID assigned to the signature. [SCORE] Score The total signature score. This is the sum of the inclusion (sensitivity) and exclusion (specificity) scores. [IN SCORE] Inclusion Score The positive inclusion component of signature score (sensitivity). [EX SCORE] Exclusion Score The negative exclusion component of signature score (specificity). [LENGTH] Length The signature length in bases. [REF] Reference The unique identifier of the contig from which the signature was extracted. [POS] Position The starting position of the signature in the reference. [SEQUENCE] Sequence The sequence content of the signature. ID The signature ID is an arbitrary , run-unique ID assigned to the signature. The signatures within the same FASTA file will have unique IDs, relative to each other. However, signatures within multiple output files will have overlapping signature IDs. This will be the case when using multiple references or not specifying any reference files. The signatures within the consolidated.fasta output will have unique signature IDs. Total Score Signatures are assigned a score corresponding to their highest-scoring BLAST alignments with all inclusion and exclusion targets, which is a sum of the positive inclusion score (sensitivity) and the negative exclusion component (specificity). This score is maximized when all inclusion targets contain a region exactly matching the entire signature and there exists no exclusion targets that match the signature. Inclusion Score The inclusion score is a non-negative number between 0.00 and 1.00 and relates to the signature's sensitivity. This score is determined by the signature's highest-scoring BLAST alignments with all inclusion targets. The inclusion score is maximized (good) when the signature is found exactly and completely in all inclusion targets and minimized (bad) when the signature is not found whatsoever in any inclusion targets. Exclusion Score The exclusion score is a non-positive number between -1.00 and 0.00 and relates to the signature's specificity. This score is determined by the signature's highest-scoring BLAST alignments with all exclusion targets. The exclusion score is maximized (bad) when the signature is found exactly and completely in all exclusion targets and minimized (good) when the signature is not found whatsoever in any exclusion targets. Length The length describes the length of the signature in bases. Although this can be calculated from the sequence, it is included in the FASTA description to accommodate other tools. Reference The reference describes the sequence identifier of the contig the signature was extracted from. This is useful for determining where the signature lies and what sequence surrounds it. Position The position describes the base position of the signature within the contig reference it was extracted from. This is useful for determining where the signature lies and what sequence surrounds it. Sequence The sequence describes the sequence content of the signature and follows the specifications of FASTA format. However, the sequence will not contain line breaks, regardless of the sequence length.","title":"Signature Format"},{"location":"format/#signature-format","text":"The signatures produced by Neptune are output in FASTA format with additional information in the description line. Signatures are output in the following format: >[ID] [SCORE] [IN SCORE] [EX SCORE] [LENGTH] [REF] [POS] [SEQUENCE] The following is an example: >425 score=0.86 in=0.98 ex=-0.13 len=31 ref=ecoli pos=160 TGTCATTCTCCTGTTCTGCCTGTATCACTGC Where: Item Full Name Description [ID] ID An arbitrary , run-unique ID assigned to the signature. [SCORE] Score The total signature score. This is the sum of the inclusion (sensitivity) and exclusion (specificity) scores. [IN SCORE] Inclusion Score The positive inclusion component of signature score (sensitivity). [EX SCORE] Exclusion Score The negative exclusion component of signature score (specificity). [LENGTH] Length The signature length in bases. [REF] Reference The unique identifier of the contig from which the signature was extracted. [POS] Position The starting position of the signature in the reference. [SEQUENCE] Sequence The sequence content of the signature.","title":"Signature Format"},{"location":"format/#id","text":"The signature ID is an arbitrary , run-unique ID assigned to the signature. The signatures within the same FASTA file will have unique IDs, relative to each other. However, signatures within multiple output files will have overlapping signature IDs. This will be the case when using multiple references or not specifying any reference files. The signatures within the consolidated.fasta output will have unique signature IDs.","title":"ID"},{"location":"format/#total-score","text":"Signatures are assigned a score corresponding to their highest-scoring BLAST alignments with all inclusion and exclusion targets, which is a sum of the positive inclusion score (sensitivity) and the negative exclusion component (specificity). This score is maximized when all inclusion targets contain a region exactly matching the entire signature and there exists no exclusion targets that match the signature.","title":"Total Score"},{"location":"format/#inclusion-score","text":"The inclusion score is a non-negative number between 0.00 and 1.00 and relates to the signature's sensitivity. This score is determined by the signature's highest-scoring BLAST alignments with all inclusion targets. The inclusion score is maximized (good) when the signature is found exactly and completely in all inclusion targets and minimized (bad) when the signature is not found whatsoever in any inclusion targets.","title":"Inclusion Score"},{"location":"format/#exclusion-score","text":"The exclusion score is a non-positive number between -1.00 and 0.00 and relates to the signature's specificity. This score is determined by the signature's highest-scoring BLAST alignments with all exclusion targets. The exclusion score is maximized (bad) when the signature is found exactly and completely in all exclusion targets and minimized (good) when the signature is not found whatsoever in any exclusion targets.","title":"Exclusion Score"},{"location":"format/#length","text":"The length describes the length of the signature in bases. Although this can be calculated from the sequence, it is included in the FASTA description to accommodate other tools.","title":"Length"},{"location":"format/#reference","text":"The reference describes the sequence identifier of the contig the signature was extracted from. This is useful for determining where the signature lies and what sequence surrounds it.","title":"Reference"},{"location":"format/#position","text":"The position describes the base position of the signature within the contig reference it was extracted from. This is useful for determining where the signature lies and what sequence surrounds it.","title":"Position"},{"location":"format/#sequence","text":"The sequence describes the sequence content of the signature and follows the specifications of FASTA format. However, the sequence will not contain line breaks, regardless of the sequence length.","title":"Sequence"},{"location":"install/","text":"Installation This installation guide assumes the use of the BASH Unix shell and a 64-bit Linux system. Direct The following instructions describe how to install Neptune directly. These instructions may require administrative privilages. Directly installing Neptune from the source files involves the following: Installing Python>=3.10 Installing pip Installing BLAST (aptitude: sudo apt-get install ncbi-blast+ ) Installing Neptune ( pip install . ) More detailed instructions are provided below. Python 3 Ensure your version of Python is compatible (python>=3.10): python --version You may wish to use Conda to create an environment specifically for this purpose: conda create --name neptune 'python>=3.10' conda activate neptune pip Ensure you can run pip: pip --version or python -m pip --version If pip is unavailable, please refer to these instructions on how to install pip. BLAST Neptune requires BLAST to be manually installed and made available as a command-line program: sudo apt-get install ncbi-blast+ You can verify BLAST was installed by ensuring the follow commands are available: makeblastdb -h blastn -h Neptune and Dependencies After downloading Neptune's source files, you can install Neptune and all of its pip dependencies with the following: pip install /path/to/neptune_directory/ or pip install . CAUTION : If you attempt pip install neptune (not interpreted as a file path), then you'll download a different package that's also named \"neptune\" that's available directly from pip. The following packages and their dependencies will be installed: numpy scipy biopython neptune You can verify the installation was successful with the following: neptune --version And you can test the installation with simple test inputs with the following: neptune -i tests/data/example/inclusion/ -e tests/data/example/exclusion/ -o output Bioconda Currently, there is no Bioconda package for Neptune v2.0.0. If you wish to install Neptune v1.2.5 with Bioconda, please use the following command to create an environment with Neptune installed: conda create -n neptune bioconda::neptune -c conda-forge -c default Please note that specifying bioconda::neptune is necessary, because otherwise Conda is likely to resolve the name to different software that's also named neptune . You may also wish to review an older version of these installation instructions for installing Neptune v1.2.5.","title":"Neptune"},{"location":"install/#installation","text":"This installation guide assumes the use of the BASH Unix shell and a 64-bit Linux system.","title":"Installation"},{"location":"install/#direct","text":"The following instructions describe how to install Neptune directly. These instructions may require administrative privilages. Directly installing Neptune from the source files involves the following: Installing Python>=3.10 Installing pip Installing BLAST (aptitude: sudo apt-get install ncbi-blast+ ) Installing Neptune ( pip install . ) More detailed instructions are provided below.","title":"Direct"},{"location":"install/#python-3","text":"Ensure your version of Python is compatible (python>=3.10): python --version You may wish to use Conda to create an environment specifically for this purpose: conda create --name neptune 'python>=3.10' conda activate neptune","title":"Python 3"},{"location":"install/#pip","text":"Ensure you can run pip: pip --version or python -m pip --version If pip is unavailable, please refer to these instructions on how to install pip.","title":"pip"},{"location":"install/#blast","text":"Neptune requires BLAST to be manually installed and made available as a command-line program: sudo apt-get install ncbi-blast+ You can verify BLAST was installed by ensuring the follow commands are available: makeblastdb -h blastn -h","title":"BLAST"},{"location":"install/#neptune-and-dependencies","text":"After downloading Neptune's source files, you can install Neptune and all of its pip dependencies with the following: pip install /path/to/neptune_directory/ or pip install . CAUTION : If you attempt pip install neptune (not interpreted as a file path), then you'll download a different package that's also named \"neptune\" that's available directly from pip. The following packages and their dependencies will be installed: numpy scipy biopython neptune You can verify the installation was successful with the following: neptune --version And you can test the installation with simple test inputs with the following: neptune -i tests/data/example/inclusion/ -e tests/data/example/exclusion/ -o output","title":"Neptune and Dependencies"},{"location":"install/#bioconda","text":"Currently, there is no Bioconda package for Neptune v2.0.0. If you wish to install Neptune v1.2.5 with Bioconda, please use the following command to create an environment with Neptune installed: conda create -n neptune bioconda::neptune -c conda-forge -c default Please note that specifying bioconda::neptune is necessary, because otherwise Conda is likely to resolve the name to different software that's also named neptune . You may also wish to review an older version of these installation instructions for installing Neptune v1.2.5.","title":"Bioconda"},{"location":"news/","text":"News Version 2.0.0 2024-10-21 This release updates Neptune to Python3, removes DRMAA support, fixes a crash when no signatures are produced, and updates the installation process. Version 1.2.5 2017-05-04 Neptune version 1.2.5 has been released to GitHub, Bioconda, and Galaxy: GitHub : https://github.com/phac-nml/neptune Bioconda : https://bioconda.github.io/recipes/neptune/README.html Galaxy : Toolshed Please see the Change Log for additional information. Bioconda Installation 2017-04-07 We have added instructions for how to install Neptune using Bioconda in the conda package manager. This may simplify installation of Neptune for many users.","title":"News"},{"location":"news/#news","text":"","title":"News"},{"location":"news/#version-200","text":"2024-10-21 This release updates Neptune to Python3, removes DRMAA support, fixes a crash when no signatures are produced, and updates the installation process.","title":"Version 2.0.0"},{"location":"news/#version-125","text":"2017-05-04 Neptune version 1.2.5 has been released to GitHub, Bioconda, and Galaxy: GitHub : https://github.com/phac-nml/neptune Bioconda : https://bioconda.github.io/recipes/neptune/README.html Galaxy : Toolshed Please see the Change Log for additional information.","title":"Version 1.2.5"},{"location":"news/#bioconda-installation","text":"2017-04-07 We have added instructions for how to install Neptune using Bioconda in the conda package manager. This may simplify installation of Neptune for many users.","title":"Bioconda Installation"},{"location":"output/","text":"Output Neptune's output directory contains the following items: Item Type Description candidates directory The directory containing signature candidates in extracted order. filtered directory The directory containing filtered signature candidates in extracted order. sorted directory The directory containing filtered signatures in signature-score sorted order. consolidated directory The directory containing the consolidate signatures from multiple sorted-signature reference files. database directory The directory containing Neptune's BLAST constructed databases. aggregate.kmers file The k -mer file containing all observed k-mers. receipt.txt file The file containing Neptune's run receipt. A file with the same name as each reference will be placed in each output directory (candidates, filtered, sorted), corresponding to the reference file from which it was derived. Candidates The candidate signatures are the sequences produced from the signature extraction step. These signatures will relatively sensitive, but not necessarily specific. This is because signature extraction is done using exact k -mer matches. The candidate signatures are guaranteed to contain no more exact matches with any exclusion k -mer than specified by the --exhits parameter. However, there may be inexact matches with exclusion targets. Filtered The filtering step is designed to remove signatures which are not interesting enough to warrant further investigation, because the negative component of their score is prohibitively large. The filtering step removes signatures that align sufficiently with any exclusion target. The filtered signatures are a subset of the candidate signatures. Sorted The sorted signatures files are organized as FASTA records containing the same signatures as their filtered signatures counterparts. However, the signatures are listed in descending order by their signature score. Signatures are assigned a score corresponding to their highest-scoring BLAST alignments with all inclusion and exclusion targets, which is a sum of a positive inclusion component and a negative exclusion component. This score is maximized when all inclusion targets contain a region exactly matching the entire signature and there exists no exclusion targets that match the signature. Consolidated The sorted signatures from all references are combined into a single \"consolidated.fasta\" file, located within the \"consolidated\" directory. Signatures are added to the consolidated signatures file in a greedy manner by selecting the next highest scoring signature available from all references. While effort is taken to prevent signatures from overlapping entirely, it is possible for consolidate signatures to have a small amount of overlap. In many circumstances, this output might be considered the final output of Neptune. Databases The databases directory contains BLAST databases constructed from the inclusion and exclusion files. Aggregate k-mers The aggregated k -mers file, aggregated.kmers, contains a list of all k -mers observed in the inclusion and exclusion groups. These k -mers are sorted and followed by two integers: the number of inclusion and exclusion targets the k -mer appears in, respectively. Run Receipt The run receipt contains information about the Neptune execution. It contains a list of all the files in the inclusion and exclusion group, and the command line parameters used for the execution.","title":"Neptune"},{"location":"output/#output","text":"Neptune's output directory contains the following items: Item Type Description candidates directory The directory containing signature candidates in extracted order. filtered directory The directory containing filtered signature candidates in extracted order. sorted directory The directory containing filtered signatures in signature-score sorted order. consolidated directory The directory containing the consolidate signatures from multiple sorted-signature reference files. database directory The directory containing Neptune's BLAST constructed databases. aggregate.kmers file The k -mer file containing all observed k-mers. receipt.txt file The file containing Neptune's run receipt. A file with the same name as each reference will be placed in each output directory (candidates, filtered, sorted), corresponding to the reference file from which it was derived.","title":"Output"},{"location":"output/#candidates","text":"The candidate signatures are the sequences produced from the signature extraction step. These signatures will relatively sensitive, but not necessarily specific. This is because signature extraction is done using exact k -mer matches. The candidate signatures are guaranteed to contain no more exact matches with any exclusion k -mer than specified by the --exhits parameter. However, there may be inexact matches with exclusion targets.","title":"Candidates"},{"location":"output/#filtered","text":"The filtering step is designed to remove signatures which are not interesting enough to warrant further investigation, because the negative component of their score is prohibitively large. The filtering step removes signatures that align sufficiently with any exclusion target. The filtered signatures are a subset of the candidate signatures.","title":"Filtered"},{"location":"output/#sorted","text":"The sorted signatures files are organized as FASTA records containing the same signatures as their filtered signatures counterparts. However, the signatures are listed in descending order by their signature score. Signatures are assigned a score corresponding to their highest-scoring BLAST alignments with all inclusion and exclusion targets, which is a sum of a positive inclusion component and a negative exclusion component. This score is maximized when all inclusion targets contain a region exactly matching the entire signature and there exists no exclusion targets that match the signature.","title":"Sorted"},{"location":"output/#consolidated","text":"The sorted signatures from all references are combined into a single \"consolidated.fasta\" file, located within the \"consolidated\" directory. Signatures are added to the consolidated signatures file in a greedy manner by selecting the next highest scoring signature available from all references. While effort is taken to prevent signatures from overlapping entirely, it is possible for consolidate signatures to have a small amount of overlap. In many circumstances, this output might be considered the final output of Neptune.","title":"Consolidated"},{"location":"output/#databases","text":"The databases directory contains BLAST databases constructed from the inclusion and exclusion files.","title":"Databases"},{"location":"output/#aggregate-k-mers","text":"The aggregated k -mers file, aggregated.kmers, contains a list of all k -mers observed in the inclusion and exclusion groups. These k -mers are sorted and followed by two integers: the number of inclusion and exclusion targets the k -mer appears in, respectively.","title":"Aggregate k-mers"},{"location":"output/#run-receipt","text":"The run receipt contains information about the Neptune execution. It contains a list of all the files in the inclusion and exclusion group, and the command line parameters used for the execution.","title":"Run Receipt"},{"location":"parameters/","text":"Parameters A help message may be viewed by running: neptune --help Mandatory Neptune requires the location of the inclusion, exclusion, and output directories. The remaining parameters will be estimated based on the input sequence or revert to default settings. The following is the minimum number of command line parameters required to run Neptune: neptune --inclusion /path/to/inclusion/directory/ --exclusion /path/to/exclusion/directory/ --output /path/to/output/directory/ The following parameters are required by Neptune: Option Alternative Parameter Description -i --inclusion FASTA A list of inclusion targets in FASTA format. You may list multiple file or directory locations following the parameter. Neptune will automatically include all files within directories. However, Neptune will not recurse into additional directories. -e --exclusion FASTA A list of exclusion targets in FASTA format. You may list multiple file or directory locations following the parameter. Neptune will automatically include all files within directories. However, Neptune will not recurse into additional directories. -o --output directory The location of the output directory. If this directory exists, any files produced with existing names will be overwritten. If this directory does not exist, then it will be created. Optional The optional parameters will either be automatically calculated or be assigned default values. k -mer The following parameters relate to k -mer generation and aggregation: Option Alternative Parameter Description -k --kmer integer The size of the k -mers. This must be a positive integer and should be large enough such that random intra-genome k -mer matches, within the largest genome, are unexpected. The size of k -mers cannot be larger than the smallest sequence record. This will be automatically calculated if not specified. --organization integer The degree of organization of k -mer counting and aggregation. This parameter determines the number nucleotide bases used in parallelized k -mer counting and, in turn, the number of parallel instances of k -mer aggregation. The number of parallel instances is determined by 4^n, where n is the specified organization parameter. This value must be a non-negative integer smaller than k . If the parameter is not specified, then n = 0 and there will be no parallel k -mer aggregation. This will likely require a much longer computation time to complete k -mer aggregation. Filtering The following command-line parameters relate to signature filtering: Option Alternative Parameter Description --filter-length float The minimum percent length of a signature candidate against a exclusion target required to filter out the candidate. This value is a percentage expressed as a floating point number [0.0, 1.0]. If the any exclusion hit exceeds the percent length and percent identity of any candidate, the candidate is removed. The default value is 0.5. --filter-percent float The minimum percent identity of a signature candidate against a exclusion target required to filter out the candidate. The percent identity is calculated as identities divided by the alignment length. This value is a percentage expressed as a floating point number [0.0, 1.0]. If the any exclusion hit exceeds the percent length and percent identity of any candidate, the candidate is removed. The default value is 0.5. --seed-size integer The seed size used for alignments. This value must be no smaller than 4. The default value is 11. Extraction The following command-line parameters relate to signature extraction: Option Alternative Parameter Description -r --reference FASTA A list of references from which to extract signatures. If this parameter is not specified, signatures will be extracted from all inclusion targets. You may list multiple file locations following the --reference parameter. --rate float The probability (0.0, 1.0) that any two homologous bases are different from each other. This should incorporate mutation rates, sequencing error rates, and assembly error rates. The rate is used to calculate the maximum allowable gap size in a signature and the minimum expected number of exact k -mer matches in a signature. If this value is not specified, the rate is assumed to be 0.01. --gc-content float The expected GC-content of the environment. The GC-content is used to calculate the maximum allowable gap size in a signature and the minimum expected number of exact k -mer matches in a signature. If this value is not specified, it is calculated by observing the GC-content of each target during signature extraction. The value must be between (0.0, 1.0). --confidence float The statistical confidence of decision making in the software. The confidence affects the automatic calculation of both the maximum gap size and minimum number of inclusion hits. If this value is not specified, a default of 0.95 is used. The value must be between (0.0, 1.0). --inhits integer The minimum number of inclusion hits required to start and continue signature extraction. If this value is not specified, it will be automatically calculated using the number of inclusion targets, the GC-content, the rate, and the k -mer size. The calculation can be found in the Mathematics documentation. This value must be a positive integer. --exhits integer The minimum number of exclusion hits necessary to stop extraction of a signature. If this value is not specified, it is assumed to be 1. This value must be a positive integer. --gap int The maximum allowable number of base positions shifted before seeing an exact k -mer match. If this value is not specified, it will be automatically calculated using the rate, GC-content, and the k -mer size. The calculation can be found in the Mathematics documentation. This value must be a positive integer. --size int The minimum size for a signature. Signatures which are shorter than this length will not be reported. If this value is not specified, the minimum signature size will be four times the length of the k -mer size. It is not recommended to locate signatures smaller than this size, unless application-specific. This value must be a positive integer. Parallelization The following parameters relate to the parallelization of Neptune: Option Alternative Parameter Description -p --parallelization integer The number of parallel working processes to create. This parameter will directly increase the speed of many stages of the software, provided there are sufficient resources available to run the worker process simultaneously. This value must be a positive integer. The default value is 8.","title":"Parameters"},{"location":"parameters/#parameters","text":"A help message may be viewed by running: neptune --help","title":"Parameters"},{"location":"parameters/#mandatory","text":"Neptune requires the location of the inclusion, exclusion, and output directories. The remaining parameters will be estimated based on the input sequence or revert to default settings. The following is the minimum number of command line parameters required to run Neptune: neptune --inclusion /path/to/inclusion/directory/ --exclusion /path/to/exclusion/directory/ --output /path/to/output/directory/ The following parameters are required by Neptune: Option Alternative Parameter Description -i --inclusion FASTA A list of inclusion targets in FASTA format. You may list multiple file or directory locations following the parameter. Neptune will automatically include all files within directories. However, Neptune will not recurse into additional directories. -e --exclusion FASTA A list of exclusion targets in FASTA format. You may list multiple file or directory locations following the parameter. Neptune will automatically include all files within directories. However, Neptune will not recurse into additional directories. -o --output directory The location of the output directory. If this directory exists, any files produced with existing names will be overwritten. If this directory does not exist, then it will be created.","title":"Mandatory"},{"location":"parameters/#optional","text":"The optional parameters will either be automatically calculated or be assigned default values.","title":"Optional"},{"location":"parameters/#k-mer","text":"The following parameters relate to k -mer generation and aggregation: Option Alternative Parameter Description -k --kmer integer The size of the k -mers. This must be a positive integer and should be large enough such that random intra-genome k -mer matches, within the largest genome, are unexpected. The size of k -mers cannot be larger than the smallest sequence record. This will be automatically calculated if not specified. --organization integer The degree of organization of k -mer counting and aggregation. This parameter determines the number nucleotide bases used in parallelized k -mer counting and, in turn, the number of parallel instances of k -mer aggregation. The number of parallel instances is determined by 4^n, where n is the specified organization parameter. This value must be a non-negative integer smaller than k . If the parameter is not specified, then n = 0 and there will be no parallel k -mer aggregation. This will likely require a much longer computation time to complete k -mer aggregation.","title":"k-mer"},{"location":"parameters/#filtering","text":"The following command-line parameters relate to signature filtering: Option Alternative Parameter Description --filter-length float The minimum percent length of a signature candidate against a exclusion target required to filter out the candidate. This value is a percentage expressed as a floating point number [0.0, 1.0]. If the any exclusion hit exceeds the percent length and percent identity of any candidate, the candidate is removed. The default value is 0.5. --filter-percent float The minimum percent identity of a signature candidate against a exclusion target required to filter out the candidate. The percent identity is calculated as identities divided by the alignment length. This value is a percentage expressed as a floating point number [0.0, 1.0]. If the any exclusion hit exceeds the percent length and percent identity of any candidate, the candidate is removed. The default value is 0.5. --seed-size integer The seed size used for alignments. This value must be no smaller than 4. The default value is 11.","title":"Filtering"},{"location":"parameters/#extraction","text":"The following command-line parameters relate to signature extraction: Option Alternative Parameter Description -r --reference FASTA A list of references from which to extract signatures. If this parameter is not specified, signatures will be extracted from all inclusion targets. You may list multiple file locations following the --reference parameter. --rate float The probability (0.0, 1.0) that any two homologous bases are different from each other. This should incorporate mutation rates, sequencing error rates, and assembly error rates. The rate is used to calculate the maximum allowable gap size in a signature and the minimum expected number of exact k -mer matches in a signature. If this value is not specified, the rate is assumed to be 0.01. --gc-content float The expected GC-content of the environment. The GC-content is used to calculate the maximum allowable gap size in a signature and the minimum expected number of exact k -mer matches in a signature. If this value is not specified, it is calculated by observing the GC-content of each target during signature extraction. The value must be between (0.0, 1.0). --confidence float The statistical confidence of decision making in the software. The confidence affects the automatic calculation of both the maximum gap size and minimum number of inclusion hits. If this value is not specified, a default of 0.95 is used. The value must be between (0.0, 1.0). --inhits integer The minimum number of inclusion hits required to start and continue signature extraction. If this value is not specified, it will be automatically calculated using the number of inclusion targets, the GC-content, the rate, and the k -mer size. The calculation can be found in the Mathematics documentation. This value must be a positive integer. --exhits integer The minimum number of exclusion hits necessary to stop extraction of a signature. If this value is not specified, it is assumed to be 1. This value must be a positive integer. --gap int The maximum allowable number of base positions shifted before seeing an exact k -mer match. If this value is not specified, it will be automatically calculated using the rate, GC-content, and the k -mer size. The calculation can be found in the Mathematics documentation. This value must be a positive integer. --size int The minimum size for a signature. Signatures which are shorter than this length will not be reported. If this value is not specified, the minimum signature size will be four times the length of the k -mer size. It is not recommended to locate signatures smaller than this size, unless application-specific. This value must be a positive integer.","title":"Extraction"},{"location":"parameters/#parallelization","text":"The following parameters relate to the parallelization of Neptune: Option Alternative Parameter Description -p --parallelization integer The number of parallel working processes to create. This parameter will directly increase the speed of many stages of the software, provided there are sufficient resources available to run the worker process simultaneously. This value must be a positive integer. The default value is 8.","title":"Parallelization"},{"location":"walkthrough/","text":"Walkthrough Overview The purpose of this walkthrough will be to illustrate a simple, but complete example of using Neptune to locate discriminatory sequences. We will identity signature sequences within an artificial data set containing three inclusion sequences and three exclusion sequences. The output will be a list of signatures, sorted by score, for each inclusion target, and one consolidated signatures file, sorted by signature score, containing signatures from all inclusion targets. Input Data We will be using very small, artificial genomes for this walkthrough. However, these small genomes will be sufficient to illustrate the operation of Neptune. The artificial genome sequence content is derived from Escherichia coli and has been modified to introduce simple variation between genomes. The example inclusion genomes are located in the following location: neptune/tests/data/example/inclusion/ The example exclusion genomes are located in the following location: neptune/tests/data/example/exclusion/ The inclusion and exclusion directories each contain three FASTA format genomes. The genomes all have some insertions and deletions that differentiate them from each other. However, the three inclusion genomes primarily differ from the three exclusion genomes in that they share large sequences that are absent from all exclusion genomes. Running Neptune Neptune will automatically calculate many of the parameters that might otherwise be specified by the user, such as the minimum number of targets signature sequence must be present within for it to be considered shared sequence. At minimum, Neptune requires the user specify the inclusion sequences, exclusion sequences, and an output directory. We will provide Neptune inclusion and exclusion sequences in the form of FASTA file genomes located within directories. The following command will run Neptune on the example data and output to the specified directory: neptune --inclusion tests/data/example/inclusion/ --exclusion tests/data/example/exclusion/ --output output/ Output Standard Output After running Neptune, very similar output will be printed to standard output, indicating that Neptune is starting and completing different stages of operation: Neptune v1.2.4 Estimating k-mer size ... k = 15 k-mer Counting... Submitted 12 jobs. 0.002063 seconds k-mer Aggregation... Submitted 65 jobs. 0.010473 seconds Signature Extraction... Submitted 6 jobs. 0.000771 seconds Signature Filtering... Submitted 2 jobs. Submitted 6 jobs. 0.002498 seconds Consolidate Signatures... Submitted 1 jobs. 0.000411 seconds Complete! Consolidated Signatures As we did not specify references from which to extract signatures, Neptune will automatically investigate all inclusion genomes for signatures and consolidate those signatures into a single consolidated signature file. The output/consolidated/consolidated.fasta file contains these consolidated signatures. This file may be understood as the final output of the application. The following FASTA output is from the consolidated signatures file produced from this example: >1.0 score=1.0000 in=1.0000 ex=0.0000 len=103 ref=inclusion1 pos=99 TAGTCTCCAGGATTCCCGGGGCGGTTCAGATAATCTTAGCATTGACCGCCTTTATATAGAAGCTGTTATTCAAGAAGC... >1.1 score=0.9979 in=0.9979 ex=0.0000 len=640 ref=inclusion1 pos=3497 CGCGGGCGATATTTTCACAGCCATTTCAGGAGTTCAGCCATGAACGCTTATTACATTCAGGATCGTCTTGAGGCTCAG... >1.2 score=0.9966 in=0.9966 ex=0.0000 len=98 ref=inclusion1 pos=5209 GCGAGTTTTGCGAGATGGTGCCGGAGTTCATCGAAAAAATGGACGAGGCACTGCTGAAATTGGTTTTGTATTTGGGGA... The FASTA header contains information relavent to the identified signature. A detailed explanation of this information is located within the output section of this documentation. The score is the sum of the in (inclusion/sensitivity) and ex (exclusion/specificity) scores, and represents a combined measure of sensitivity and specificity. The length describes the length of the signature in bases. The ref (reference) and pos (position) describe the location of the signature within the reference FASTA record it was extracted from. In this example, Neptune identified three signatures: 1.0, 1.1, and 1.2 of lengths 103, 640, and 98, respectively. We see that all of these signatures originated from the inclusion1 reference. These signatures were located at positions 99, 3497, and 5209 within the inclusion1 reference. These signatures are of very high quality, within the context of our data set, with scores of 1.0000, 0.9979, and 0.9969, within the possible range of score values from -1.00 to +1.00. Sorted Signatures If we're interested in looking at the signatures produced from each individual inclusion target, we need to investigate the output in the output/sorted directory. The following are the signatures extracted exclusively from the inclusion1.fasta target: >0 score=1.0000 in=1.0000 ex=0.0000 len=103 ref=inclusion1 pos=99 TAGTCTCCAGGATTCCCGGGGCGGTTCAGATAATCTTAGCATTGACCGCCTTTATATAGAAGCTGTTATTCAAGAAGC... >1 score=0.9979 in=0.9979 ex=0.0000 len=640 ref=inclusion1 pos=3497 CGCGGGCGATATTTTCACAGCCATTTCAGGAGTTCAGCCATGAACGCTTATTACATTCAGGATCGTCTTGAGGCTCAG... >2 score=0.9966 in=0.9966 ex=0.0000 len=98 ref=inclusion1 pos=5209 GCGAGTTTTGCGAGATGGTGCCGGAGTTCATCGAAAAAATGGACGAGGCACTGCTGAAATTGGTTTTGTATTTGGGGA... The following are the signatures extracted exclusively from the \\textit{inclusion2.fasta} target: >0 score=1.0000 in=1.0000 ex=0.0000 len=103 ref=inclusion2 pos=99 TAGTCTCCAGGATTCCCGGGGCGGTTCAGATAATCTTAGCATTGACCGCCTTTATATAGAAGCTGTTATTCAAGAAGC... >1 score=0.9979 in=0.9979 ex=0.0000 len=640 ref=inclusion2 pos=3494 CGCGGGCGATATTTTCACAGCCATTTTCAGGAGTTCAGCCATGAACGCTTATTACATTCAGGATCGTCTTGAGGCTCA... >2 score=0.9933 in=0.9933 ex=0.0000 len=99 ref=inclusion2 pos=5206 GCGAGTTTTGACGAGATGGTGCCGGAGTTCATCGAAAAAATGGACGAGGCACTGCTGAAATTGGTTTTGTATTTGGGG... The following are the signatures extracted exclusively from the \\textit{inclusion3.fasta} target: >0 score=1.0000 in=1.0000 ex=0.0000 len=103 ref=inclusion3 pos=99 TAGTCTCCAGGATTCCCGGGGCGGTTCAGATAATCTTAGCATTGACCGCCTTTATATAGAAGCTGTTATTCAAGAAGC... >2 score=0.9833 in=0.9833 ex=0.0000 len=100 ref=inclusion3 pos=5203 GCGAGTTTTAACGAGATGGTGCCGGAGTTCATCGAAAAAATGGACCGAGGCACTGCTGAAATTGGTTTTGTATTTGGG... >1 score=0.9792 in=0.9979 ex=0.0187 len=640 ref=inclusion3 pos=3492 CGCGGGCGATATTTTCACAGCCATTTTCAGGAGTTCAGCCATGAACGCTTATTACATTCAGGATCGTCTTGAGGCTCA... The output from these files appears very similar, as is expected when Neptune identifies highly discriminatory signatures from a homogeneous data set. However, there are some slight differences between some of these signatures. For example, the signatures in each of these output files have corresponding ID numbers and some of these signatures have slight differences. However, because Neptune assigns signature IDs arbitrarily, this correspondence will usually never happen when using real data. Nonetheless, we see that signature ID 2 is slightly different sizes in all three inclusion targets (5209, 5206, and 5203) with slightly different scores (0.9966, 0.9933, 0.9833). Another slight difference between the signatures is the sequence similarity of signature ID 1 in inclusion3.fasta with exclusion sequence: >1 score=0.9792 in=0.9979 ex=0.0187 len=640 ref=inclusion3 pos=3492 CGCGGGCGATATTTTCACAGCCATTTTCAGGAGTTCAGCCATGAACGCTTATTACATTCAGGATCGTCTTGAGGCTCA... This signature had some similarity with exclusion sequence, represented by the ex=0.0187 , and indicates a small amount of imprecision in this signature. This example also illustrates that the score (0.9792) is the sum of the in (0.9979) and ex (0.0187) values. These differences in signatures from each inclusion target are a consequence of sequence differences. The user's discretion will be required in determining which of these are most appropriate. Nonetheless, as described above, Neptune will attempt to consolidate these signatures into a single output file, if a single answer is desirable.","title":"Walkthrough"},{"location":"walkthrough/#walkthrough","text":"","title":"Walkthrough"},{"location":"walkthrough/#overview","text":"The purpose of this walkthrough will be to illustrate a simple, but complete example of using Neptune to locate discriminatory sequences. We will identity signature sequences within an artificial data set containing three inclusion sequences and three exclusion sequences. The output will be a list of signatures, sorted by score, for each inclusion target, and one consolidated signatures file, sorted by signature score, containing signatures from all inclusion targets.","title":"Overview"},{"location":"walkthrough/#input-data","text":"We will be using very small, artificial genomes for this walkthrough. However, these small genomes will be sufficient to illustrate the operation of Neptune. The artificial genome sequence content is derived from Escherichia coli and has been modified to introduce simple variation between genomes. The example inclusion genomes are located in the following location: neptune/tests/data/example/inclusion/ The example exclusion genomes are located in the following location: neptune/tests/data/example/exclusion/ The inclusion and exclusion directories each contain three FASTA format genomes. The genomes all have some insertions and deletions that differentiate them from each other. However, the three inclusion genomes primarily differ from the three exclusion genomes in that they share large sequences that are absent from all exclusion genomes.","title":"Input Data"},{"location":"walkthrough/#running-neptune","text":"Neptune will automatically calculate many of the parameters that might otherwise be specified by the user, such as the minimum number of targets signature sequence must be present within for it to be considered shared sequence. At minimum, Neptune requires the user specify the inclusion sequences, exclusion sequences, and an output directory. We will provide Neptune inclusion and exclusion sequences in the form of FASTA file genomes located within directories. The following command will run Neptune on the example data and output to the specified directory: neptune --inclusion tests/data/example/inclusion/ --exclusion tests/data/example/exclusion/ --output output/","title":"Running Neptune"},{"location":"walkthrough/#output","text":"","title":"Output"},{"location":"walkthrough/#standard-output","text":"After running Neptune, very similar output will be printed to standard output, indicating that Neptune is starting and completing different stages of operation: Neptune v1.2.4 Estimating k-mer size ... k = 15 k-mer Counting... Submitted 12 jobs. 0.002063 seconds k-mer Aggregation... Submitted 65 jobs. 0.010473 seconds Signature Extraction... Submitted 6 jobs. 0.000771 seconds Signature Filtering... Submitted 2 jobs. Submitted 6 jobs. 0.002498 seconds Consolidate Signatures... Submitted 1 jobs. 0.000411 seconds Complete!","title":"Standard Output"},{"location":"walkthrough/#consolidated-signatures","text":"As we did not specify references from which to extract signatures, Neptune will automatically investigate all inclusion genomes for signatures and consolidate those signatures into a single consolidated signature file. The output/consolidated/consolidated.fasta file contains these consolidated signatures. This file may be understood as the final output of the application. The following FASTA output is from the consolidated signatures file produced from this example: >1.0 score=1.0000 in=1.0000 ex=0.0000 len=103 ref=inclusion1 pos=99 TAGTCTCCAGGATTCCCGGGGCGGTTCAGATAATCTTAGCATTGACCGCCTTTATATAGAAGCTGTTATTCAAGAAGC... >1.1 score=0.9979 in=0.9979 ex=0.0000 len=640 ref=inclusion1 pos=3497 CGCGGGCGATATTTTCACAGCCATTTCAGGAGTTCAGCCATGAACGCTTATTACATTCAGGATCGTCTTGAGGCTCAG... >1.2 score=0.9966 in=0.9966 ex=0.0000 len=98 ref=inclusion1 pos=5209 GCGAGTTTTGCGAGATGGTGCCGGAGTTCATCGAAAAAATGGACGAGGCACTGCTGAAATTGGTTTTGTATTTGGGGA... The FASTA header contains information relavent to the identified signature. A detailed explanation of this information is located within the output section of this documentation. The score is the sum of the in (inclusion/sensitivity) and ex (exclusion/specificity) scores, and represents a combined measure of sensitivity and specificity. The length describes the length of the signature in bases. The ref (reference) and pos (position) describe the location of the signature within the reference FASTA record it was extracted from. In this example, Neptune identified three signatures: 1.0, 1.1, and 1.2 of lengths 103, 640, and 98, respectively. We see that all of these signatures originated from the inclusion1 reference. These signatures were located at positions 99, 3497, and 5209 within the inclusion1 reference. These signatures are of very high quality, within the context of our data set, with scores of 1.0000, 0.9979, and 0.9969, within the possible range of score values from -1.00 to +1.00.","title":"Consolidated Signatures"},{"location":"walkthrough/#sorted-signatures","text":"If we're interested in looking at the signatures produced from each individual inclusion target, we need to investigate the output in the output/sorted directory. The following are the signatures extracted exclusively from the inclusion1.fasta target: >0 score=1.0000 in=1.0000 ex=0.0000 len=103 ref=inclusion1 pos=99 TAGTCTCCAGGATTCCCGGGGCGGTTCAGATAATCTTAGCATTGACCGCCTTTATATAGAAGCTGTTATTCAAGAAGC... >1 score=0.9979 in=0.9979 ex=0.0000 len=640 ref=inclusion1 pos=3497 CGCGGGCGATATTTTCACAGCCATTTCAGGAGTTCAGCCATGAACGCTTATTACATTCAGGATCGTCTTGAGGCTCAG... >2 score=0.9966 in=0.9966 ex=0.0000 len=98 ref=inclusion1 pos=5209 GCGAGTTTTGCGAGATGGTGCCGGAGTTCATCGAAAAAATGGACGAGGCACTGCTGAAATTGGTTTTGTATTTGGGGA... The following are the signatures extracted exclusively from the \\textit{inclusion2.fasta} target: >0 score=1.0000 in=1.0000 ex=0.0000 len=103 ref=inclusion2 pos=99 TAGTCTCCAGGATTCCCGGGGCGGTTCAGATAATCTTAGCATTGACCGCCTTTATATAGAAGCTGTTATTCAAGAAGC... >1 score=0.9979 in=0.9979 ex=0.0000 len=640 ref=inclusion2 pos=3494 CGCGGGCGATATTTTCACAGCCATTTTCAGGAGTTCAGCCATGAACGCTTATTACATTCAGGATCGTCTTGAGGCTCA... >2 score=0.9933 in=0.9933 ex=0.0000 len=99 ref=inclusion2 pos=5206 GCGAGTTTTGACGAGATGGTGCCGGAGTTCATCGAAAAAATGGACGAGGCACTGCTGAAATTGGTTTTGTATTTGGGG... The following are the signatures extracted exclusively from the \\textit{inclusion3.fasta} target: >0 score=1.0000 in=1.0000 ex=0.0000 len=103 ref=inclusion3 pos=99 TAGTCTCCAGGATTCCCGGGGCGGTTCAGATAATCTTAGCATTGACCGCCTTTATATAGAAGCTGTTATTCAAGAAGC... >2 score=0.9833 in=0.9833 ex=0.0000 len=100 ref=inclusion3 pos=5203 GCGAGTTTTAACGAGATGGTGCCGGAGTTCATCGAAAAAATGGACCGAGGCACTGCTGAAATTGGTTTTGTATTTGGG... >1 score=0.9792 in=0.9979 ex=0.0187 len=640 ref=inclusion3 pos=3492 CGCGGGCGATATTTTCACAGCCATTTTCAGGAGTTCAGCCATGAACGCTTATTACATTCAGGATCGTCTTGAGGCTCA... The output from these files appears very similar, as is expected when Neptune identifies highly discriminatory signatures from a homogeneous data set. However, there are some slight differences between some of these signatures. For example, the signatures in each of these output files have corresponding ID numbers and some of these signatures have slight differences. However, because Neptune assigns signature IDs arbitrarily, this correspondence will usually never happen when using real data. Nonetheless, we see that signature ID 2 is slightly different sizes in all three inclusion targets (5209, 5206, and 5203) with slightly different scores (0.9966, 0.9933, 0.9833). Another slight difference between the signatures is the sequence similarity of signature ID 1 in inclusion3.fasta with exclusion sequence: >1 score=0.9792 in=0.9979 ex=0.0187 len=640 ref=inclusion3 pos=3492 CGCGGGCGATATTTTCACAGCCATTTTCAGGAGTTCAGCCATGAACGCTTATTACATTCAGGATCGTCTTGAGGCTCA... This signature had some similarity with exclusion sequence, represented by the ex=0.0187 , and indicates a small amount of imprecision in this signature. This example also illustrates that the score (0.9792) is the sum of the in (0.9979) and ex (0.0187) values. These differences in signatures from each inclusion target are a consequence of sequence differences. The user's discretion will be required in determining which of these are most appropriate. Nonetheless, as described above, Neptune will attempt to consolidate these signatures into a single output file, if a single answer is desirable.","title":"Sorted Signatures"}]}